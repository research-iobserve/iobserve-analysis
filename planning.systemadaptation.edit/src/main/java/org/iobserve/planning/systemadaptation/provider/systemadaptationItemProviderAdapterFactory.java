/**
 */
package org.iobserve.planning.systemadaptation.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.iobserve.planning.systemadaptation.util.systemadaptationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class systemadaptationItemProviderAdapterFactory extends systemadaptationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public systemadaptationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.SystemAdaptation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemAdaptationItemProvider systemAdaptationItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.SystemAdaptation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdaptationAdapter() {
		if (systemAdaptationItemProvider == null) {
			systemAdaptationItemProvider = new SystemAdaptationItemProvider(this);
		}

		return systemAdaptationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.AssemblyContextAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblyContextActionItemProvider assemblyContextActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.AssemblyContextAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyContextActionAdapter() {
		if (assemblyContextActionItemProvider == null) {
			assemblyContextActionItemProvider = new AssemblyContextActionItemProvider(this);
		}

		return assemblyContextActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.ResourceContainerAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceContainerActionItemProvider resourceContainerActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.ResourceContainerAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceContainerActionAdapter() {
		if (resourceContainerActionItemProvider == null) {
			resourceContainerActionItemProvider = new ResourceContainerActionItemProvider(this);
		}

		return resourceContainerActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.ChangeRepositoryComponentAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeRepositoryComponentActionItemProvider changeRepositoryComponentActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.ChangeRepositoryComponentAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeRepositoryComponentActionAdapter() {
		if (changeRepositoryComponentActionItemProvider == null) {
			changeRepositoryComponentActionItemProvider = new ChangeRepositoryComponentActionItemProvider(this);
		}

		return changeRepositoryComponentActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.AllocateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllocateActionItemProvider allocateActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.AllocateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllocateActionAdapter() {
		if (allocateActionItemProvider == null) {
			allocateActionItemProvider = new AllocateActionItemProvider(this);
		}

		return allocateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.DeallocateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeallocateActionItemProvider deallocateActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.DeallocateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeallocateActionAdapter() {
		if (deallocateActionItemProvider == null) {
			deallocateActionItemProvider = new DeallocateActionItemProvider(this);
		}

		return deallocateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.MigrateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MigrateActionItemProvider migrateActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.MigrateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMigrateActionAdapter() {
		if (migrateActionItemProvider == null) {
			migrateActionItemProvider = new MigrateActionItemProvider(this);
		}

		return migrateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.AcquireAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireActionItemProvider acquireActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.AcquireAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquireActionAdapter() {
		if (acquireActionItemProvider == null) {
			acquireActionItemProvider = new AcquireActionItemProvider(this);
		}

		return acquireActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.TerminateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminateActionItemProvider terminateActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.TerminateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminateActionAdapter() {
		if (terminateActionItemProvider == null) {
			terminateActionItemProvider = new TerminateActionItemProvider(this);
		}

		return terminateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.iobserve.planning.systemadaptation.ReplicateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplicateActionItemProvider replicateActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.iobserve.planning.systemadaptation.ReplicateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplicateActionAdapter() {
		if (replicateActionItemProvider == null) {
			replicateActionItemProvider = new ReplicateActionItemProvider(this);
		}

		return replicateActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemAdaptationItemProvider != null) systemAdaptationItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (assemblyContextActionItemProvider != null) assemblyContextActionItemProvider.dispose();
		if (resourceContainerActionItemProvider != null) resourceContainerActionItemProvider.dispose();
		if (changeRepositoryComponentActionItemProvider != null) changeRepositoryComponentActionItemProvider.dispose();
		if (allocateActionItemProvider != null) allocateActionItemProvider.dispose();
		if (deallocateActionItemProvider != null) deallocateActionItemProvider.dispose();
		if (migrateActionItemProvider != null) migrateActionItemProvider.dispose();
		if (acquireActionItemProvider != null) acquireActionItemProvider.dispose();
		if (terminateActionItemProvider != null) terminateActionItemProvider.dispose();
		if (replicateActionItemProvider != null) replicateActionItemProvider.dispose();
	}

}
