buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-clover-plugin:2.2.0'
    }
}

// checking the presence of an Eclipse API baseline repositorsy
if (project.properties['api.baseline'] == null || project.properties['api.baseline'].isEmpty()) {
	System.err.println("Cannot find an Eclipse API baseline repository")
	System.err.println("Create file iobserve-analysis/gradle.properties if missing.")
	System.err.println("Add the property api.baseline=path to the repository")
	System.err.println("Use / for path separation")
	System.err.println("The repository can be found at git@github.com:research-iobserve/iobserve-repository.git")
} else {	
	println "iObserve API baseline repository is at: " + project.properties['api.baseline']
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.bmuschko.clover'

def confDir = "${project.rootDir}/qa-configurations"

repositories {
    mavenCentral()
    mavenLocal()
}


clover {
	targetPercentage = cloverCoverage
	report {
		html = true
	}
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'com.bmuschko.clover'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    version = '0.0.3-SNAPSHOT'
    group = 'org.iobserve'
    
    repositories {
    	mavenCentral()
        mavenLocal()
        jcenter()
    }

	dependencies {
	
		// logging
		compile 'org.slf4j:slf4j-api:1.7.25'
		compile 'org.slf4j:slf4j-log4j12:1.7.25'
		
	    // central
		testCompile "junit:junit:4.12"
	    testCompile 'org.hamcrest:hamcrest-all:1.3'
	    testCompile 'org.powermock:powermock-core:1.6.1'
	    testCompile 'org.powermock:powermock-module-junit4:1.6.1'
	    testCompile 'org.powermock:powermock-api-mockito:1.6.1'
	}
        

    clover {
		targetPercentage = cloverCoverage
        report {
           html=true
        }
        compiler {
           debug = true
        }
    }

    // --- quality assurance plugins ---

    apply plugin: 'pmd'
    
    pmd {
	// the used PMD version should be the same version as the PMD Eclipse plugin (https://marketplace.eclipse.org/content/eclipse-pmd) uses
	toolVersion = pmdAndCpdVersion

        ignoreFailures = true

        // Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
        ruleSets = []
        ruleSetFiles = files(resolveRelativeToParent(confDir, 'pmdrules.xml'))
    }

    // check.dependsOn(':cpdCheck')

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = checkstyleVersion
        ignoreFailures = true
        showViolations = false
	configFile = new File(confDir, "checkstyle-rules.xml")
	configDir = new File(confDir)
    }

    apply plugin: 'findbugs'
     findbugs {	
        toolVersion = fbVersion
        ignoreFailures = true
        effort = "max"
        reportLevel = "low"

        //excludeFilter = resolveRelativeToParent(dirConfig, 'fb-filter.xml')
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

	tasks.withType(Checkstyle) {
	    reports {
	        xml.enabled true
	    }
	}

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven {url "https://repo.eclipse.org/content/groups/releases/" }
		maven {url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven {url "https://oss.sonatype.org/content/repositories/releases/" }
		maven {url "https://mvnrepository.com/artifact/org.eclipse.emf/org.eclipse.emf.ecore" }
		maven {url "https://oss.sonatype.org/content/groups/public/"}
		maven {url "https://jitpack.io"}
		maven {url "https://mvnrepository.com/artifact/org.eclipse/ocl" }
		maven {url "http://mvnrepository.com/artifact/org.eclipselabs/cdo.p2"}
		maven {url "http://mvnrepository.com/artifact/org.eclipselabs/cdo"}
		maven {url "http://mvnrepository.com/artifact/org.eclipselabs/cdo-maven"}
		maven {url "http://mvnrepository.com/artifact/commons-daemon/commons-daemon"}
		maven {url "http://mvnrepository.com/artifact/commons-cli/commons-cli"}
		maven {url "https://mvnrepository.com/artifact/org.antlr/antlr-runtime"}
		maven {url project.properties['api.baseline']}
    }

    ext {
        appName = "org.iobserve"
    }
    
    eclipse {
	    classpath {
	       downloadSources=true
	       downloadJavadoc=true
	    }
    }
}

task reports {
	doLast {
		def reportCollection = ""
		subprojects.each { s -> 
			reportCollection += "\t\t<h2>" + s.name + "</h2>\n"
			reportCollection += "\t\t<ul>\n"

			def folder = new File ("$projectDir/" + s.name + "/build/reports/checkstyle")

			if (folder.exists()) {
				reportCollection += "\t\t\t<li><a href=\"" + s.name + "/build/reports/checkstyle/main.html\">checkstyle main</a></li>\n"
				reportCollection += "\t\t\t<li><a href=\"" + s.name + "/build/reports/checkstyle/test.html\">checkstyle test</a></li>\n"
			}

			folder = new File ("$projectDir/" + s.name + "/build/reports/tests")
			if (folder.exists()) {
				reportCollection += "\t\t\t<li><a href=\"" + s.name + "/build/reports/tests/test/index.html\">JUnit tests</a></li>\n"
			}
			
			folder = new File ("$projectDir/" + s.name + "/build/reports/clover")
			if (folder.exists()) {
				reportCollection += "\t\t\t<li><a href=\"" + s.name + "/build/reports/clover/html/index.html\">Test coverage</a></li>\n"
			}
			
			folder = new File ("$projectDir/" + s.name + "/build/reports/pmd")
			if (folder.exists()) {
				def mainFile = new File ("$projectDir/" + s.name + "/build/reports/pmd/main.html")
				def testFile = new File ("$projectDir/" + s.name + "/build/reports/pmd/test.html")
				
				if (mainFile.exists()) {
					reportCollection += "\t\t\t<li><a href=\"" + s.name + "/build/reports/pmd/main.html\">PMD main</a></li>\n"
				}
				if (testFile.exists()) {
					reportCollection += "\t\t\t<li><a href=\"" + s.name + "/build/reports/pmd/test.html\">PMD test</a></li>\n"
				}
			}

			reportCollection += "\t\t</ul>\n"
		}


		new File("$projectDir/reports.html").text = """
<html>
	<head>
		<title>Project Summary</title>
	</head>
	<body>
		<h1>Project Summary</h1>
$reportCollection
	</body>
</html>
"""
	}
}

def resolveRelativeToParent(String directory, String file) {
    return rootProject.file(directory + '/' + file)
}

// the following code is derived from Kieker

def parseCheckstyleReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'file'.'error'.each { issue ->
            switch (issue.attribute("severity")) {
                case "error":
                    errors++
                    break;
                case "warning":
                    warnings++
                    break;
                default:
                    infos++
                    break;
            }
        }
    }
    return [errors, warnings, infos]
}

def parseFindbugsReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'FindBugsSummary'.each { issue ->
            def prio1Bugs = issue.attribute("priority_1")
            def prio2Bugs = issue.attribute("priority_2")
            def bugsTotal = issue.attribute("total_bugs")
            def prio1BugsInt = 0
            def prio2BugsInt = 0
            def bugsTotalInt = 0

            if (prio1Bugs != null) {
                prio1BugsInt = Integer.valueOf(prio1Bugs)
            }

            if (prio2Bugs != null) {
                prio2BugsInt = Integer.valueOf(prio2Bugs)
            }

            if (bugsTotal != null) {
                bugsTotalInt = Integer.valueOf(bugsTotal)
            }

            errors += prio1BugsInt
            warnings += prio2BugsInt
            infos += bugsTotalInt - (prio1BugsInt + prio2BugsInt)
        }
    }
    return [errors, warnings, infos]
}

def parsePmdReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'file'.'violation'.each { issue ->

            // https://github.com/jenkinsci/pmd-plugin/blob/master/src/main/java/hudson/plugins/pmd/parser/PmdParser.java#L26-L29
            switch (issue.attribute("priority")) {
                case "1":
                case "2":
                    errors++
                    break;
                case "3":
                case "4":
                    warnings++;
                    break;
                case "5":
                default:
                    infos++
                    break;
            }
        }
    }
    return [errors, warnings, infos]
}

def parseCpdReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'duplication'.each { issue ->
			errors++
        }
    } else {
	println 'Could not find CPD report file at ' + reportFile
    }
    return [errors, warnings, infos]
}

rootProject.subprojects.each { project -> configure(project) {

		task checkThresholds(dependsOn: ["build"]) {
		  doLast {
		    def reportTypes = ['main', 'test']
		
		    // Begin Checkstyle report parsing
		    def csErrors = 0
		    def csWarnings = 0
		    def csInfos = 0
		
			def p = project
			
		        reportTypes.each { String type ->
		            def reportFile = file(p.projectDir.path + '/build/reports/checkstyle/' + type + '.xml')
		            def reportResults = parseCheckstyleReport(reportFile)
		            csErrors += reportResults[0]
		            csWarnings += reportResults[1]
		            csInfos += reportResults[2]
		        }
		    // End Checkstyle report parsing
		
		
		    // Begin Findbugs report parsing
		    def fbErrors = 0
		    def fbWarnings = 0
		    def fbInfos = 0
		
		        reportTypes.each { String type ->
		            def reportFile = file(p.projectDir.path + '/build/reports/findbugs/' + type + '.xml')
		            def reportResults = parseFindbugsReport(reportFile)
		            fbErrors += reportResults[0]
		            fbWarnings += reportResults[1]
		            fbInfos += reportResults[2]
		        }
		    // End Findbugs report parsing
		
		
		    // Begin PMD report parsing
		    def pmdErrors = 0
		    def pmdWarnings = 0
		    def pmdInfos = 0
		
		        reportTypes.each { String type ->
		            def reportFile = file(p.projectDir.path + '/build/reports/pmd/' + type + '.xml')
		            def reportResults = parsePmdReport(reportFile)
		            pmdErrors += reportResults[0]
		            pmdWarnings += reportResults[1]
		            pmdInfos += reportResults[2]
		        }
		    // End PMD report parsing
		
		
		    // Begin CPD report parsing
		    def cpdErrors = 0
		
			p = rootProject
			// cpd only produces one single file in the root project without any report types, such as main and test.
		        def reportFile = file(p.projectDir.path + '/build/reports/cpd/cpdCheck.xml')
		        def reportResults = parseCpdReport(reportFile)
		        cpdErrors += reportResults[0]
		    // End CPD report parsing
		
		
		    // Print results
		    println("Static analysis results:")
		    println()
		    println(" Checkstyle:")
		    println("  Errors: " + csErrors + " (Threshold: " + checkstyleErrorThreshold + ")")
		    println("  Warnings: " + csWarnings + " (Threshold: " + checkstyleWarningThreshold + ")")
		    println("  Info: " + csInfos)
		    println()
		    println(" Findbugs:")
		    println("  Errors: " + fbErrors + " (Threshold: " + findbugsErrorThreshold + ")")
		    println("  Warnings: " + fbWarnings + " (Threshold: " + findbugsWarningThreshold + ")")
		    println("  Info: " + fbInfos)
		    println()
		    println(" PMD:")
		    println("  Errors: " + pmdErrors + " (Threshold: " + pmdErrorThreshold + ")")
		    println("  Warnings: " + pmdWarnings + " (Threshold: " + pmdWarningThreshold + ")")
		    println("  Info: " + pmdInfos)
		    println()
		    println(" CPD (counts for all Kieker components):")
		    println("  Errors: " + cpdErrors + " (Threshold: " + cpdErrorThreshold + ")")
		
		
		    // Fail build if Checkstyle thresholds are violated
		    if (csWarnings > Integer.valueOf(checkstyleWarningThreshold)) {
		        throw new GradleException("There were checkstyle warnings exceeding the warning threshold! Warnings: " + csWarnings + " Threshold: " + checkstyleWarningThreshold)
		    }
		
		    if (csErrors > Integer.valueOf(checkstyleErrorThreshold)) {
		        throw new GradleException("There were checkstyle errors exceeding the error threshold! Errors: " + csErrors + " Threshold: " + checkstyleErrorThreshold)
		    }
		
		    // Fail build if Findbugs thresholds are violated
		    if (fbWarnings > Integer.valueOf(findbugsWarningThreshold)) {
		        throw new GradleException("There were findbugs warnings exceeding the warning threshold! Warnings: " + fbWarnings + " Threshold: " + findbugsWarningThreshold)
		    }
		
		    if (fbErrors > Integer.valueOf(findbugsErrorThreshold)) {
		        throw new GradleException("There were findbugs errors exceeding the error threshold! Errors: " + fbErrors + " Threshold: " + findbugsErrorThreshold)
		    }
		
		    // Fail build if PMD thresholds are violated
		    if (pmdWarnings > Integer.valueOf(pmdWarningThreshold)) {
		        throw new GradleException("There were pmd warnings exceeding the warning threshold! Warnings: " + pmdWarnings + " Threshold: " + pmdWarningThreshold)
		    }
		
		    if (pmdErrors > Integer.valueOf(pmdErrorThreshold)) {
		        throw new GradleException("There were pmd errors exceeding the error threshold! Errors: " + pmdErrors + " Threshold: " + pmdErrorThreshold)
		    }
		
			// Fail build if CPD thresholds are violated
		    if (cpdErrors > Integer.valueOf(cpdErrorThreshold)) {
		        throw new GradleException("There were cpd errors exceeding the error threshold! Errors: " + cpdErrors + " Threshold: " + cpdErrorThreshold)
		    }
		  }
		}

		tasks.check.finalizedBy(checkThresholds)
	}
}


