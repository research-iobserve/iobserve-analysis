import com.diffplug.gradle.pde.*
import com.diffplug.gradle.p2.*
import com.diffplug.gradle.FileMisc
import com.diffplug.gradle.ZipMisc
import com.diffplug.common.swt.os.SwtPlatform

////////////////////////////////////////////////
// Build our application into a P2 repository //
////////////////////////////////////////////////

def P2_DIR = 'build/p2'

task buildP2(type: PdeBuildTask, dependsOn: ':target.maven:bundles') {
	// set the base platform
	base(rootProject.file('target.p2/build/p2asmaven/p2runnable/eclipse-deps'))
	// configure where the plugins will come from
	addPluginPath(rootProject.file('target.maven/build'))
	addPluginPath(rootProject.file('target.p2/build/p2asmaven/p2runnable/eclipse-deps'))
	// and where they will go
	destination(P2_DIR)
	// specify that this is a product build
	product {
		id projectId
		version rootProject.version
		productPluginDir rootProject.file(pluginProjectDirectory)
		productFileWithinPlugin productFileName
		explicitVersionPolicy({
			// most here are just to tell goomph which version to take when there are conflicting versions
			//it.resolve('com.google.guava', '17.0.0', '18.0.0').with('17.0.0', '18.0.0')
			it.resolve('com.google.inject', '3.0.0.v201605172100', '3.0.0').with('3.0.0.v201605172100')
			it.resolve('com.ibm.icu', '58.2.0.v20170418-1837', '54.1.1.v201501272100').with('58.2.0.v20170418-1837')
			it.resolve('javax.annotation', '1.2.0.v201602091430', '1.2.0.v201401042248').with('1.2.0.v201602091430')
			
			// next four are the ones we really need both versions (therefore also look at target.maven/build.gradle and root build.gradle)
			it.resolve('org.antlr.runtime', '4.3.0.v201502022030', '3.2.0.v201101311130').with('4.3.0.v201502022030', '3.2.0.v201101311130')
			it.resolve('org.apache.batik.css', '1.7.0.v201011041433', '1.8.0.v20170214-1941').with('1.7.0.v201011041433', '1.8.0.v20170214-1941')
			it.resolve('org.apache.batik.util', '1.7.0.v201011041433', '1.8.0.v20170214-1941').with('1.7.0.v201011041433', '1.8.0.v20170214-1941')
			it.resolve('org.apache.batik.util.gui', '1.8.0.v20170214-1941', '1.7.0.v200903091627').with('1.8.0.v20170214-1941', '1.7.0.v200903091627')
			
			it.resolve('org.apache.commons.cli', '1.2.0.v201404270220', '1.2.0').with('1.2.0.v201404270220')
			it.resolve('org.apache.commons.codec', '1.9.0.v20170208-1614', '1.6.0.v201305230611').with('1.9.0.v20170208-1614')
			it.resolve('org.apache.commons.logging', '1.1.1.v201101211721', '1.1.3').with('1.1.1.v201101211721')
			it.resolve('org.apache.lucene.core', '3.5.0.v20120725-1805', '6.1.0.v20170814-1820').with('6.1.0.v20170814-1820')
			it.resolve('org.eclipse.ant.core', '3.5.0.v20170509-2149', '3.4.0.v20150428-1928').with('3.5.0.v20170509-2149')
		})
	}
	// set the build properties to be appropriate for p2
	props['p2.build.repo'] = 'file://' + project.file(P2_DIR).absolutePath
	props['p2.gathering'] =	'true'
	props['skipDirector'] =	'true'
	props['runPackager'] = 'false'
	props['groupConfigurations'] = 'true'

	// p2.compress doesn't work, dunno why
	doLast {
		def compressXml = { name ->
			File xml = project.file(P2_DIR + "/${name}.xml")
			File jar = project.file(P2_DIR + "/${name}.jar")
			ZipMisc.zip(xml, "${name}.xml", jar)
			xml.delete()
		}
		compressXml('artifacts')
		compressXml('content')
	}
}

P2Model model = new P2Model()
model.addRepo(project.file(P2_DIR))
model.addIU(uid)

def createTask(SwtPlatform platform, P2Model model) {
	def assembleTask = project.task('assemble.' + platform)
	assembleTask.doLast {
		def dest = project.file('build/' + platform + (platform.os == 'macosx' ? '.app' : ''))
		FileMisc.cleanDir(dest)
		P2Model.DirectorApp director = model.directorApp(dest, 'RcpDemo')
		director.roaming()
		director.platform(platform)
		director.installFeatures()
		director.runUsingBootstrapper(project)
	}
	return assembleTask
}
def assembleAll = project.task('assemble.all')
for (SwtPlatform platform : SwtPlatform.getAll()) {
	def assemble = createTask(platform, model)
	assembleAll.dependsOn(assemble)
	assemble.dependsOn(buildP2)
}

